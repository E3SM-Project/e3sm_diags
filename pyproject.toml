[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "e3sm_diags"
dynamic = ["version"]
description = "E3SM Diagnostics"
authors = [
  { name = "Chengzhu (Jill) Zhang", email = "zhang40@llnl.gov" },
  { name = "Tom Vo" },
  { name = "Ryan Forsyth" },
  { name = "Chris Golaz" },
  { name = "Zeshawn Shaheen" },
]
license = { text = "BSD 3-Clause" }
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD 3-Clause License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  "beautifulsoup4",
  "cartopy >=0.17.0",
  # This package is not available on PyPI.
  # "cartopy_offlinedata",
  "cf-units",
  "dask <2024.12.0",
  "esmpy >=8.4.0",
  "lxml",
  "mache >=0.15.0",
  "matplotlib >=3.8.2",
  "netcdf4",
  "output_viewer >=1.3.0",
  "numpy >=2.0.0,<3.0.0",
  "scipy <1.15",
  "shapely >=2.0.0,<3.0.0",
  "xarray >=2024.03.0",
  "xcdat >=0.7.3,<1.0.0",
  "xesmf >=0.8.7",
  "xskillscore >=0.0.20",
]

[project.optional-dependencies]
test = ["pytest", "pytest-cov"]
docs = ["sphinx", "sphinx_rtd_theme", "sphinx-multiversion"]
dev = [
  "black",
  "flake8",
  "flake8-isort",
  "isort",
  "mypy",
  "pre-commit",
  "types-PyYAML",
]

[project.urls]
Documentation = "https://docs.e3sm.org/e3sm_diags/_build/html/main/index.html"
"Issue Tracker" = "https://github.com/E3SM-Project/e3sm_diags/issues"

[project.scripts]
e3sm_diags = "e3sm_diags.e3sm_diags_driver:main"
e3sm_diags_vars = "e3sm_diags.e3sm_diags_vars:main"

[tool.setuptools.packages.find]
include = ["e3sm_diags", "e3sm_diags.*"]

[tool.setuptools.dynamic]
version = { attr = "e3sm_diags.__version__" }

[tool.setuptools.data-files]
"share/e3sm_diags" = [
  "e3sm_diags/driver/acme_ne30_ocean_land_mask.nc",
  "misc/e3sm_logo.png",
]

"share/e3sm_diags/viewer" = ["e3sm_diags/viewer/index_template.html"]

"share/e3sm_diags/zonal_mean_xy" = [
  "e3sm_diags/driver/default_diags/zonal_mean_xy*",
  "e3sm_diags/driver/default_diags/legacy_diags/zonal_mean_xy*",
]
"share/e3sm_diags/zonal_mean_2d" = [
  "e3sm_diags/driver/default_diags/zonal_mean_2d_model*",
  "e3sm_diags/driver/default_diags/legacy_diags/zonal_mean_2d*",
]
"share/e3sm_diags/zonal_mean_2d_stratosphere" = [
  "e3sm_diags/driver/default_diags/zonal_mean_2d_stratosphere*",
]
"share/e3sm_diags/meridional_mean_2d" = [
  "e3sm_diags/driver/default_diags/meridional_mean_2d*",
]
"share/e3sm_diags/lat_lon" = [
  "e3sm_diags/driver/default_diags/lat_lon*",
  "e3sm_diags/driver/default_diags/legacy_diags/lat_lon*",
]
"share/e3sm_diags/polar" = [
  "e3sm_diags/driver/default_diags/polar*",
  "e3sm_diags/driver/default_diags/legacy_diags/polar*",
]
"share/e3sm_diags/lat_lon_vector" = [
  "e3sm_diags/driver/default_diags/lat_lon_vector*",
]
"share/e3sm_diags/lat_lon_land" = [
  "e3sm_diags/driver/default_diags/lat_lon_land*",
]
"share/e3sm_diags/lat_lon_river" = [
  "e3sm_diags/driver/default_diags/lat_lon_river*",
]
"share/e3sm_diags/cosp_histogram" = [
  "e3sm_diags/driver/default_diags/cosp_histogram*",
  "e3sm_diags/driver/default_diags/legacy_diags/cosp_histogram*",
]
"share/e3sm_diags/area_mean_time_series" = [
  "e3sm_diags/driver/default_diags/area_mean_time_series*",
]
"share/e3sm_diags/enso_diags" = ["e3sm_diags/driver/default_diags/enso_*"]
"share/e3sm_diags/qbo" = ["e3sm_diags/driver/default_diags/qbo*"]
"share/e3sm_diags/streamflow" = ["e3sm_diags/driver/default_diags/streamflow*"]
"share/e3sm_diags/diurnal_cycle" = [
  "e3sm_diags/driver/default_diags/diurnal_cycle_*",
]
"share/e3sm_diags/arm_diags" = ["e3sm_diags/driver/default_diags/arm_diags_*"]
"share/e3sm_diags/tc_analysis" = [
  "e3sm_diags/driver/default_diags/tc_analysis_*",
]
"share/e3sm_diags/annual_cycle_zonal_mean" = [
  "e3sm_diags/driver/default_diags/annual_cycle_zonal_mean_*",
]
"share/e3sm_diags/aerosol_aeronet" = [
  "e3sm_diags/driver/default_diags/aerosol_aeronet*cfg",
  "e3sm_diags/driver/default_diags/aerosol_aeronet_data/*.txt",
]
"share/e3sm_diags/aerosol_budget" = [
  "e3sm_diags/driver/default_diags/aerosol_budget*cfg",
]
"share/e3sm_diags/mp_partition" = [
  "e3sm_diags/driver/default_diags/mp_partition*cfg",
]
"share/e3sm_diags/tropical_subseasonal" = [
  "e3sm_diags/driver/default_diags/tropical_subseasonal*cfg",
]
"share/e3sm_diags/colormaps" = ["e3sm_diags/plot/colormaps/*.rgb"]
"share/e3sm_diags/control_runs" = ["e3sm_diags/driver/control_runs/*"]

[tool.black]
# Docs: https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html
line-length = 88
target-version = ["py39", "py310"]
include = '\.pyi?$'
exclude = '''
/(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.idea
    | venv
    | _build
    | buck-out
    | build
    | dist
    | docs
    | config
    | conda
    | analysis_data_preprocess
)/
'''

[tool.isort]
# Docs: https://pycqa.github.io/isort/docs/configuration/options.html#example-pyprojecttoml_4
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
skip = "e3sm_diags/e3sm_diags_driver.py"

[tool.pytest.ini_options]
# Docs: https://docs.pytest.org/en/7.2.x/reference/customize.html#configuration
junit_family = "xunit2"
addopts = "--cov=e3sm_diags --cov-report term --cov-report html:tests_coverage_reports/htmlcov --cov-report xml:tests_coverage_reports/coverage.xml -s"
python_files = ["tests.py", "test_*.py"]
# Only run the unit tests because integration tests take a long time.
# Integration tests can be executed manually with `test.sh` or `pytest tests/integration`.
testpaths = "tests/e3sm_diags"

[tool.mypy]
# Docs: https://mypy.readthedocs.io/en/stable/config_file.html
python_version = "3.10"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = ["analysis_data_preprocess.*", "model_data_preprocess.*"]
ignore_errors = true
